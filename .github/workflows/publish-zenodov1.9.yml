name: Publish to Zenodo (v1.9)

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Retrieve Existing Zenodo Deposition ID
        id: get-deposition-id
        env:
          GH_TOKEN: ${{ secrets.REPO_VAR_TOKEN }}
        run: |
          echo "Retrieving ZENODO_DEPOSITION_ID from repository variables..."
          response=$(curl -s -H "Authorization: Bearer $GH_TOKEN" \
                           -H "Accept: application/vnd.github+json" \
                           https://api.github.com/repos/${{ github.repository }}/actions/variables/ZENODO_DEPOSITION_ID)

          id=$(echo "$response" | jq -r '.value // empty')

          if [[ -n "$id" ]]; then
            echo "final_deposition_id=$id" >> $GITHUB_OUTPUT
            echo "found=true" >> $GITHUB_OUTPUT
          else
            echo "found=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Zenodo Deposition (if not found)
        if: steps.get-deposition-id.outputs.found == 'false'
        id: create-deposition
        env:
          ZENODO_ACCESS_TOKEN: ${{ secrets.ZENODO_SANDBOX_ACCESS_TOKEN_NEW }}
        run: |
          echo "Creating a new Zenodo deposition..."
          response=$(curl -s -X POST https://sandbox.zenodo.org/api/deposit/depositions \
                      -H "Content-Type: application/json" \
                      -H "Authorization: Bearer $ZENODO_ACCESS_TOKEN" \
                      -d '{}')

          new_id=$(echo "$response" | jq -r '.id // empty')

          if [[ -z "$new_id" ]]; then
            echo "Error: Failed to create deposition. Response: $response"
            exit 1
          fi

          echo "New Zenodo deposition created: ID=$new_id"
          echo "final_deposition_id=$new_id" >> $GITHUB_OUTPUT

      - name: Save Zenodo Deposition ID as Repository Variable
        if: steps.get-deposition-id.outputs.found == 'false'
        env:
          GH_TOKEN: ${{ secrets.REPO_VAR_TOKEN }}
          VAR_NAME: ZENODO_DEPOSITION_ID
          VAR_VALUE: ${{ steps.create-deposition.outputs.final_deposition_id }}
        run: |
          echo "Persisting Zenodo deposition ID as a repository variable..."
          repo=${{ github.repository }}

          exists=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer $GH_TOKEN" \
            https://api.github.com/repos/$repo/actions/variables/$VAR_NAME)

          if [[ "$exists" == "404" ]]; then
            echo "Variable does not exist. Creating..."
            curl -s -X POST \
              -H "Authorization: Bearer $GH_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              https://api.github.com/repos/$repo/actions/variables \
              -d "{\"name\":\"$VAR_NAME\", \"value\":\"$VAR_VALUE\"}"
          else
            echo "Variable exists. Updating..."
            curl -s -X PUT \
              -H "Authorization: Bearer $GH_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              https://api.github.com/repos/$repo/actions/variables/$VAR_NAME \
              -d "{\"name\":\"$VAR_NAME\", \"value\":\"$VAR_VALUE\"}"
          fi

      - name: Resolve Final Deposition ID
        id: resolve-id
        run: |
          echo "Resolving final deposition ID..."
          if [[ "${{ steps.get-deposition-id.outputs.found }}" == "true" ]]; then
            echo "final_deposition_id=${{ steps.get-deposition-id.outputs.final_deposition_id }}" >> $GITHUB_OUTPUT
          else
            echo "final_deposition_id=${{ steps.create-deposition.outputs.final_deposition_id }}" >> $GITHUB_OUTPUT
          fi

      - name: Publish to Zenodo
        uses: ipcc-ar7/publish-zenodo@v1.9
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ZENODO_SANDBOX_ACCESS_TOKEN: ${{ secrets.ZENODO_SANDBOX_ACCESS_TOKEN }}
        with:
          files: |
            README.md
          metadata: metadatav1.9.yml
          sandbox: true
          publish: true
          verbose: true
          concept: ${{ steps.resolve-id.outputs.final_deposition_id }}
