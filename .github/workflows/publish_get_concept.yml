name: Publish to Zenodo - Get Concept

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  publish-update:
    runs-on: ubuntu-latest
    name: Publish new version under same Zenodo concept
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Zip the code folder
        run: zip -r code.zip code/

      - name: Get latest concept deposition
        id: get_concept
        env:
          ZENODO_ACCESS_TOKEN: ${{ secrets.ZENODO_SANDBOX_ACCESS_TOKEN }}
        run: |
          echo "Fetching depositions from Zenodo sandbox..."
          RESPONSE=$(curl -s -H "Authorization: Bearer $ZENODO_ACCESS_TOKEN" \
            "https://sandbox.zenodo.org/api/deposit/depositions?sort=mostrecent&size=1")

          echo "Response: $RESPONSE"

          CONCEPT_ID=$(echo "$RESPONSE" | jq -r '.[0].conceptrecid // empty')
          OLD_DEPOSITION_ID=$(echo "$RESPONSE" | jq -r '.[0].id // empty')
          if [ -z "$CONCEPT_ID" ]; then
            echo "Error: Could not find concept ID from existing depositions."
            exit 1
          fi

          echo "Found Concept ID: $CONCEPT_ID"
          echo "Found Old Deposition ID: $OLD_DEPOSITION_ID"
          echo "CONCEPT_ID=$CONCEPT_ID" >> $GITHUB_ENV

      - name: Create new version under the concept
        id: new_version
        env:
          ZENODO_ACCESS_TOKEN: ${{ secrets.ZENODO_SANDBOX_ACCESS_TOKEN }}
        run: |
          echo "Creating new version under concept ID: $CONCEPT_ID"
      
          # Make the request and capture headers
          RESPONSE_HEADERS=$(mktemp)
          curl -s -D "$RESPONSE_HEADERS" -o /dev/null -X POST \
            "https://sandbox.zenodo.org/api/deposit/depositions/$CONCEPT_ID/actions/newversion" \
            -H "Authorization: Bearer $ZENODO_ACCESS_TOKEN"
      
          # Extract the Location header (URL of the new draft)
          NEW_DEPOSITION_URL=$(grep -Fi Location "$RESPONSE_HEADERS" | awk '{print $2}' | tr -d '\r')
      
          if [ -z "$NEW_DEPOSITION_URL" ]; then
            echo "Error: Could not extract new deposition URL from Location header."
            exit 1
          fi
      
          echo "New draft URL: $NEW_DEPOSITION_URL"
      
          # Fetch the actual deposition to get its ID
          NEW_DEPOSITION=$(curl -s -H "Authorization: Bearer $ZENODO_ACCESS_TOKEN" "$NEW_DEPOSITION_URL")
          DEPOSITION_ID=$(echo "$NEW_DEPOSITION" | jq -r '.id')
      
          if [ -z "$DEPOSITION_ID" ]; then
            echo "Error: Could not retrieve deposition ID from draft."
            exit 1
          fi
      
          echo "New deposition ID: $DEPOSITION_ID"
          echo "DEPOSITION_ID=$DEPOSITION_ID" >> $GITHUB_ENV
      
      - name: Upload updated metadata
        env:
          ZENODO_ACCESS_TOKEN: ${{ secrets.ZENODO_SANDBOX_ACCESS_TOKEN }}
        run: |
          curl -s -X PUT "https://sandbox.zenodo.org/api/deposit/depositions/$DEPOSITION_ID" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $ZENODO_ACCESS_TOKEN" \
            --data-binary @.zenodo.json

      - name: Upload code.zip
        env:
          ZENODO_ACCESS_TOKEN: ${{ secrets.ZENODO_SANDBOX_ACCESS_TOKEN }}
        run: |
          curl -s -X POST "https://sandbox.zenodo.org/api/deposit/depositions/$DEPOSITION_ID/files" \
            -H "Authorization: Bearer $ZENODO_ACCESS_TOKEN" \
            -F "file=@code.zip;filename=code.zip"

      # - name: Publish the new version
      #   env:
      #     ZENODO_ACCESS_TOKEN: ${{ secrets.ZENODO_SANDBOX_ACCESS_TOKEN }}
      #   run: |
      #     RESPONSE=$(curl -s -X POST "https://sandbox.zenodo.org/api/deposit/depositions/$DEPOSITION_ID/actions/publish" \
      #       -H "Authorization: Bearer $ZENODO_ACCESS_TOKEN")

      #     echo "Publish response: $RESPONSE"
